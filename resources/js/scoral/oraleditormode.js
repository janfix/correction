export default function oralEditorMode() {

    // Load data from JSON generated by request on correction done 
    try {

        var CorrDoneData = JSON.parse($(".hiddenCorrDone").html());
    } catch (error) {
        var CorrDoneData = [{
            Corr_Code: "",
            Corr_cluster_id: "",
            item_id: "",
            id: "",
            results: ""
        }];

    }

    // Array of all test takers selected For correction done (DONE)
    var allttDone = [];
    // $("#jumpDone").empty();
    for (let i = 0; i < CorrDoneData.length; i++) {
        allttDone.push(CorrDoneData[i].id);
        $("#jumpDone").append("<option value =" + CorrDoneData[i].id + ">" + CorrDoneData[i].id + "</option>");
    }
    //Put Select box by default on 1rst Record
    $("#jumpDone").prop("selectedIndex", 0);


    //Build R object for response from RQdone By default 0 (First Record)
    var R = JSON.parse(CorrDoneData[0].results);

    // Install UI for edition
    $(".textMaskOral").hide();
    $(".mode").html("Edition"); //Edition
    $(".ttEditor").css("display", "inline");
    $(".testtaker").hide();
    $(".corrapp").css("background-color", "#fff3ef");

    var mediaFolderName = CorrDoneData[0].mediafolder;
    $("audio").attr("src", "/../uploads/" + mediaFolderName + "/" + CorrDoneData[0].mediafilename + ".mp3");


    var IDActif = $("#jumpDone").val();
    //Update data First element by default
    updateData(IDActif)

    //Install listener on Test Taker Select to get ID value 
    $("#jumpDone").on("change", function() {

        updateData($(this).val());

    })

    function updateData(IDActif) {
        for (let i = 0; i < CorrDoneData.length; i++) {
            if (CorrDoneData[i].id == IDActif) {
                R = JSON.parse(CorrDoneData[i].results);
                $("audio").attr("src", "/../uploads/" + mediaFolderName + "/" + CorrDoneData[i].mediafilename + ".mp3");
                //AudioQuality
                $("#QaudioSelectEDITOR").val(R.audioQ);
                $("#commentPerf").val(R.comment);


                for (let y = 0; y < R.QAnswers.length; y++) {
                    $("#" + R.QAnswers[y][1]).prop("checked", true);

                }
            }
        }



    }


    // Close Editor and return to new correction mode
    $(".oralCloseEditorMode").on("click", function() {
        $(".mode").html("Creation");
        $(".ttEditor").hide();
        $(".testtaker").show();
        $(".corrapp").css("background-color", "#F8F9FA");
        $(".trackIcon").css("background-color", "crimson");
        $(".textSpace").find(".ctimeBox").remove();
        $("#QaudioSelect").prop('selectedIndex', 0);
        var CData = JSON.parse($(".hiddenData").html());
        for (let i = 0; i < CData.length; i++) {
            if (CData[i].id == $("#jump").val()) {
                $("audio").attr("src", "/../uploads/" + mediaFolderName + "/" + CData[i].mediafilename + ".mp3");
            }

        }

    });


}