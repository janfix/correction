import letterBadgeUpdate from './letterBadgeUpdate';
import clearAllMarks from './clearAllMarks';
import badgeSystem from './badgeSystem';
import markLiaison from './markLiaison';
import * as Rconti from './Rcontainer';

export default function editorMode() {

    // Load data from JSON generated by request on correction done 
    var CorrDoneData = Rconti.CorrDoneData;

    // Array of all test takers selected For correction done (DONE)
    var allttDone = [];
    $("#jumpDone").empty();
    for (let i = 0; i < CorrDoneData.length; i++) {
        allttDone.push(CorrDoneData[i].id);
        $("#jumpDone").append("<option value =" + CorrDoneData[i].id + ">" + CorrDoneData[i].id + "</option>");
    }
    //Put Select box by default on 1rst Record
    $("#jumpDone").prop("selectedIndex", 0);

    //Build R object for response from RQdone By default 0 (First Record)
    var R = JSON.parse(CorrDoneData[0].results);

    // Install UI for edition
    $(".mode").html("Edition"); //Edition
    $(".ttEditor").css("display", "inline");
    $(".testtaker").hide();
    $(".corrapp").css("background-color", "#fff3ef");
    clearAllMarks();
    $(".closeTTagger").trigger("click");

    var mediaFolderName = CorrDoneData[0].mediafolder;
    $("audio").attr("src", "/../uploads/" + mediaFolderName + "/" + CorrDoneData[0].mediafilename + ".mp3#t=00:0" + R.timeReset);




    //Update data First element by default
    updateData()


    //Install listener on Test Taker Select to get ID value 
    $("#jumpDone").on("change", function() {
        $(".closeTTagger").trigger("click");
        $(".letterControl").html("<span class='letter zoneEdition'>Espace analyse des mots </span>");


        for (let i = 0; i < CorrDoneData.length; i++) {
            if (CorrDoneData[i].id == $(this).val()) {
                R = JSON.parse(CorrDoneData[i].results);
                $("audio").attr("src", "/../uploads/" + mediaFolderName + "/" + CorrDoneData[i].mediafilename + ".mp3#t=00:0" + R.timeReset);
                clearAllMarks();
                // $(".liaigroup").remove();
                updateData(CorrDoneData[i].id);
                Rconti.RContainer.badges = R.badges;
                Rconti.RContainer.liaisons = R.liaisons;
                Rconti.RContainer.letterBadges = R.letterBadges;


            }
        }
    })

    function updateData(IDActif) {
        Rconti.RContainer.timer = R.timer;
        Rconti.RContainer.timeReset = R.timeReset;
        $(".startValue").html(R.timeReset);

        //AudioQuality
        $("#QaudioSelectEDITOR").val(R.audioQ);
        $("#commentPerf").val(R.comment);
        if (R.tracker[0] == true) {
            $(".audioTrackED").css("backgroundColor", "green");
        } else {
            $(".audioTrackED").css("backgroundColor", "red");
        }
        if (R.tracker[1] == true) {
            $(".chronoTrackED").css("backgroundColor", "green");
        } else {
            $(".chronoTrackED").css("backgroundColor", "red");
        }
        if (R.tracker[2] == true) {
            $(".mComplexTrackED").css("backgroundColor", "green");
        } else {
            $(".mComplexTrackED").css("backgroundColor", "red");
        }
        if (R.tracker[3] == true) {
            $(".liaisonTrackED").css("backgroundColor", "green");
        } else {
            $(".liaisonTrackED").css("backgroundColor", "red");
        }

        //FirstWord and lastW Recovery
        if (R.firstWord.length > 0) { $("#" + R.firstWord).addClass("firstWordRead"); }
        //TODO : cancel lines and words before ! 
        //TODO : Listener to cancel
        if (R.lastWord.length > 0) { $("#" + R.lastWord).addClass("lastWordRead"); }
        //TODO : cancel lines and words after ! 
        //TODO : listener dblckick to cancel
        //Update in data give element to Rconti.container ! 
        Rconti.RContainer.firstWord = R.firstWord;
        Rconti.RContainer.lastWord = R.lastWord;

        //Tracker rouge / vert
        Rconti.RContainer.tracker = R.tracker;



        //Loops automatic manage empty fields
        //Badges
        for (let i = 0; i < R.badges.length; i++) {
            console.log(R.badges[i])
            var badgeData = {}
            badgeData.initial = R.badges[i].codeError;
            badgeData.mention = R.badges[i].type;
            badgeSystem("#" + R.badges[i].origin, badgeData, "load");
        }
        //Highlighted Words 
        for (let i = 0; i < R.Hword.length; i++) {
            $("#" + R.Hword[i]).addClass("h_word");

        }
        //Liaisons
        for (let i = 0; i < R.liaisons.length; i++) {
            var loc = $("#" + R.liaisons[i][1])[0];
            var lType = R.liaisons[i][0];
            console.log(lType);
            markLiaison(loc, lType);
        }

        //Badges For letters - First LOAD - !
        for (let i = 0; i < R.letterBadges.length; i++) {
            var letterData = {};
            letterData.origin = R.letterBadges[i][1].origin;
            letterData.type = R.letterBadges[i][1].type;
            //letterBadgeUpdate(letterData); //Inutile car c'est le word activator qui prend en charge !!!!
        }

        //Display only 1 record ChronoTag ! 
        var activRecord = $("#jumpDone").val();
        console.log(activRecord);

        BadgeLetterDelete()




    }
    // Close Editor and return to new correction mode
    $(".closeEditorMode").on("click", function() {
        $(".mode").html("Creation");
        $(".ttEditor").hide();
        $(".testtaker").show();
        $(".corrapp").css("background-color", "#F8F9FA");
        clearAllMarks();
        $(".trackIcon").css("background-color", "crimson");
        Rconti.RContainer.liaisons = [];
        $(".textSpace").find(".ctimeBox").remove();
        var CData = JSON.parse($(".hiddenData").html());
        for (let i = 0; i < CData.length; i++) {
            if (CData[i].id == $("#jump").val()) {
                console.log("JP TRACKER");
                $("audio").attr("src", "/../uploads/" + mediaFolderName + "/" + CData[i].mediafilename + ".mp3");
            }

        }
        $(".closeTTagger").trigger("click");
        $(".letterControl").html('<span class="letter zoneEdition">Espace analyse des mots </span>');


    });

    //DELELTE BADGE LETTER ON DBLCLICK
    function BadgeLetterDelete() {
        $(document).on("dblclick", ".badgeLetter", function(e) {
            let specialCase = $(this).attr("title");
            // console.log(specialCase);
            if (specialCase == "Scalling Point" || specialCase == "Point d'arrêt" || specialCase == "Ommission") {
                if (typeof $(e.target).parent().parent().attr("id") !== "undefined") {
                    let IdentifWord = $(e.target).parent().parent().attr("id").split("L");
                    if (typeof IdentifWord !== "undefined") {}
                    console.log(IdentifWord);
                    let WordLength = $("#" + IdentifWord[0]).html().length
                    $(".DIA").remove();
                    for (let i = IdentifWord[1]; i < WordLength; i++) {
                        $("#" + IdentifWord[0] + "L" + i).removeClass("missingLetter");
                        $("#" + IdentifWord[0] + "L" + i).find(".exactLetter").removeClass("missingLetter");
                    }
                }
            }

            //Si on est en Creation c'est removeData ci-dessous, si on modifie c'est un nouveau prog. avec R, CAD on écrit dans le HTML caché toutes les modifs à chaud.
            //Donc à chaque modif, on charge tout le json et on le modifie, puis on le réécrit en dur.
            removeData(this);
            $(this).remove();
        });

        function removeData(that) {
            console.log(that)
            let remID = $(that).attr("id"); // ID to remove
            let modeActif = $(".mode").html();
            let TTactif = $("#jumpDone").val();
            let IDLetterBadge = that.id
            console.log($(that).attr("class").search("badgeLetter"));


            if ($(that).attr("class").search("badgeLetter") == -1) { //Simple Word Badge Deletion
                for (let i = 0; i < Rconti.RContainer.badges.length; i++) {
                    if (remID == Rconti.RContainer.badges[i].id) {
                        R.letterBadges.splice(y, 1);
                        Rconti.RContainer.badges.splice(i, 1);
                    }
                }

            } else { //badgeLetter Deletion
                console.log(Rconti.RContainer);

                for (let y = 0; y < Rconti.RContainer.letterBadges.length; y++) {
                    console.log(Rconti.RContainer.letterBadges[y][1].id);
                    console.log(that.id)
                    if (Rconti.RContainer.letterBadges[y][1].id == that.id) {
                        console.log("DELETOR");
                        R.letterBadges.splice(y, 1);
                        Rconti.RContainer.letterBadges.splice(y, 1);
                    }
                }
            }


        }


    }


    return R
}